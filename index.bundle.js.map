{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/check-whether-to-format-file.js","webpack:///./lib/maybe-find-local-prettier-instance.js","webpack:///./lib/maybe-format.js","webpack:///./lib/simple-prettier-atom.js","webpack:///external \"atom\"","webpack:///external \"fs\"","webpack:///external \"import-from\"","webpack:///external \"path\"","webpack:///external \"pify\"","webpack:///external \"pkg-up\"","webpack:///external \"semver\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB,4BAA4B;AAC5B;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO,wBAAwB;;AAE/B;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;ACjFA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,SAAS,+CAA+C;AACxD;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;;AC9DA;AACA;AACA;;AAE8B;;AAE9B;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;AC/CA,iC;;;;;;;;;;;;ACAA,+B;;;;;;;;;;;;ACAA,wC;;;;;;;;;;;;ACAA,iC;;;;;;;;;;;;ACAA,iC;;;;;;;;;;;;ACAA,mC;;;;;;;;;;;;ACAA,mC","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/simple-prettier-atom.js\");\n","//---------//\n// Imports //\n//---------//\n\nimport path from 'path'\n\n//\n//------//\n// Init //\n//------//\n\nconst setOfUnsupportedParsers = new Set(['vue'])\n\n//\n//------//\n// Main //\n//------//\n\nconst checkWhetherToFormatFile = (filepath, prettier) => {\n  return prettier.resolveConfigFile(filepath)\n    .then(configFilepath => {\n      if (!configFilepath) return\n\n      const ignorePath = getPrettierIgnorePath(configFilepath)\n      return Promise.all([\n        configFilepath,\n        prettier.getFileInfo(filepath, { ignorePath })\n      ])\n    })\n    .then(result => {\n      if (!result) return false\n\n      const [configFilepath, fileInfo] = result\n      return !!(\n        configFilepath &&\n        !fileInfo.ignored &&\n        fileInfo.inferredParser &&\n        !setOfUnsupportedParsers.has(fileInfo.inferredParser)\n      )\n    })\n}\n\nfunction getPrettierIgnorePath(configFilepath) {\n  const configDir = path.dirname(configFilepath)\n  return path.join(configDir, '.prettierignore')\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport default checkWhetherToFormatFile\n","//---------//\n// Imports //\n//---------//\n\nimport fs from 'fs'\nimport importFrom from 'import-from'\nimport path from 'path'\nimport pify from 'pify'\nimport pkgUp from 'pkg-up'\nimport semver from 'semver'\n\n//\n//------//\n// Init //\n//------//\n\nconst minimumSupportedPrettierVersion = '1.13.0'\n\n//\n//------//\n// Main //\n//------//\n\nconst maybeFindLocalPrettierInstance = filepath => {\n  return pkgUp(path.dirname(filepath))\n    .then(packageJsonFilepath => {\n      return packageJsonFilepath\n        ? Promise.all([readFile(packageJsonFilepath), packageJsonFilepath])\n        : undefined\n    })\n    .then(result => {\n      if (!result) return\n\n      const [packageJsonContent, packageJsonFilepath] = result,\n        json = tryParseJson(packageJsonContent)\n\n      if (!json) return\n      const {\n        dependencies = {},\n        devDependencies = {},\n        version = '0.0.0'\n      } = json\n\n      if (\n        (!dependencies.prettier && !devDependencies.prettier)\n        || semver.lt(minimumSupportedPrettierVersion, version)\n      ) return\n\n      const packageJsonDir = path.dirname(packageJsonFilepath)\n\n      let prettierInstance\n      try {\n        prettierInstance = importFrom(packageJsonDir, 'prettier')\n      } catch(_unused_error) {} // eslint-disable-line no-empty\n\n      return prettierInstance\n    })\n}\n\n//\n//------------------//\n// Helper Functions //\n//------------------//\n\nfunction readFile(filepath) {\n  return pify(fs.readFile)(filepath, 'utf8')\n}\n\nfunction tryParseJson(string) {\n  try {\n    return JSON.parse(string);\n  } catch (e) {\n    return false;\n  }\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport default maybeFindLocalPrettierInstance\n","//---------//\n// Imports //\n//---------//\n\nimport checkWhetherToFormatFile from './check-whether-to-format-file'\nimport maybeFindLocalPrettierInstance from './maybe-find-local-prettier-instance'\n\n//\n//------//\n// Main //\n//------//\n\nconst maybeFormat = () => {\n  const editor = atom.workspace.getActiveTextEditor(),\n    buffer = editor.getBuffer(),\n    position = editor.getCursorBufferPosition(),\n    cursorOffset = buffer.characterIndexForPosition(position),\n    filepath = buffer.getPath()\n\n  return maybeFindLocalPrettierInstance(filepath)\n    .then(prettier => {\n      if (!prettier) return\n\n      return Promise.all([\n        checkWhetherToFormatFile(filepath, prettier),\n        prettier\n      ])\n    })\n    .then(result => {\n      if (!result) return\n\n      const [shouldFormatFile, prettier] = result\n      if (!shouldFormatFile) return\n\n      return Promise.all([\n        prettier.resolveConfig(filepath),\n        prettier,\n      ])\n    })\n    .then(result => {\n      if (!result) return\n\n      const [config, prettier] = result,\n        { formatted, cursorOffset: updatedCursorOffset } = prettier.formatWithCursor(\n          buffer.getText(),\n          Object.assign(config, {\n            cursorOffset,\n            filepath,\n          })\n        )\n\n      buffer.setText(formatted)\n      const newPosition = buffer.positionForCharacterIndex(updatedCursorOffset)\n      editor.setCursorBufferPosition(newPosition)\n    })\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport default maybeFormat\n","//---------//\n// Imports //\n//---------//\n\nimport { CompositeDisposable } from 'atom'\n\nimport maybeFormat from './maybe-format'\n\n//\n//------//\n// Init //\n//------//\n\nconst setOfBuffers = new Set()\n\n//\n//------//\n// Main //\n//------//\n\nexport default {\n  activate() {\n\n    this.disposables = new CompositeDisposable(\n      atom.commands.add('atom-workspace', {\n        'simple-prettier-atom:format': maybeFormat,\n      }),\n\n      atom.workspace.observeTextEditors(editor => {\n        const buffer = editor.getBuffer()\n\n        if (setOfBuffers.has(buffer)) return\n\n        setOfBuffers.add(buffer)\n        const disposable = buffer.onWillSave(maybeFormat)\n        buffer.onDidDestroy(() => {\n          disposable.dispose()\n          setOfBuffers.delete(buffer)\n        })\n      })\n    )\n\n  },\n\n  deactivate() {\n    this.disposables.dispose()\n  },\n}\n","module.exports = require(\"atom\");","module.exports = require(\"fs\");","module.exports = require(\"import-from\");","module.exports = require(\"path\");","module.exports = require(\"pify\");","module.exports = require(\"pkg-up\");","module.exports = require(\"semver\");"],"sourceRoot":""}